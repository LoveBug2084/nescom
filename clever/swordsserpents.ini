CertainlyCode $1C0B4 NMI
CertainlyCode $1C049 Reset
CertainlyCode $1C047 IRQ
JumpTable $1FFFA $1FFFB 2 3 Vectors
CertainlyCode $1FFF0 Jump_NMI
CertainlyCode $1FFF3 Jump_Reset
CertainlyCode $1FFF6 Jump_IRQ
JumpTable $1EED2 $1EED3 2 16 JumpTable1EED2
JumpTable $1C9D3 $1C9D4 2 20 JumpTable1C9D3
JumpTable $14361 $14373 1 18 JumpTable14361

DataTableRoutineWithXY $1C00C
DataTableRoutineWithXY $1D9D7
DataTableRoutineWithXY $1C021
DataTableRoutineWithXY $1D7A3

CertainlyCode $1C000 Jump_1D636
CertainlyCode $1C003 Jump_1D65C
CertainlyCode $1C006 Jump_1D7A3
CertainlyCode $1C009 Jump_1D991
CertainlyCode $1D9D7 RenderText_At
CertainlyCode $1C00C RenderText_At_
CertainlyData $1DA68 CharacterSetTranslationTable
CertainlyCode $1C00F Jump_1DAE8
CertainlyCode $1C015 Jump_1E185
CertainlyCode $1C01B Jump_1E262
CertainlyCode $1C01E Jump_1F682
CertainlyCode $1C021 Jump_1F658
CertainlyCode $1C024 GameData_TestFlag_
CertainlyCode $1FE51 GameData_TestFlag
CertainlyCode $1C027 GameData_SetFlag_
CertainlyCode $1FDCF GameData_SetFlag
CertainlyCode $1C02A Jump_1E170
CertainlyCode $1C02D Jump_1CE9A
CertainlyCode $1C030 Jump_1DB36
CertainlyCode $1C033 Jump_1E455
CertainlyCode $1C036 Jump_1D6EC
CertainlyCode $1C039 Jump_1D68E
CertainlyCode $1C03C Jump_1D6AF
CertainlyData $1C03F BusConflictSafeTable

# Bank switch at $1C1EC

RAM $15 MapperProgramming
RAM $46 CurrentBank
CertainlyCode       $1C241 SwitchBank
MapperChangeRoutine $1C241 $8000 reg A

CertainlyCode $14001 Guess_SoundEngine
CertainlyCode $1C1EC NMI_RunSoundEngine
CertainlyCode $1C1CC NMI_UpdatePPUregisters
RAM $47 Guess_SoundEngineActive
RAM $23 PPU_ScrollX
RAM $24 PPU_ScrollY
RAM $25 PPU_NameTableAddressFlagBit0
RAM $26 PPU_NameTableAddressFlagBit1
RAM $27 PPU_CurrentReg2000
RAM $28 PPU_CurrentReg2001

CertainlyCode $1C109 NMI_Function0_CopyBytes0
Comment       $1C109 "Copy b$14 bytes from w$12 into PPU address w$10"
CertainlyCode $1C126 NMI_Function1_CopyBytes1
Comment       $1C126 "Copy b$14 bytes from w$10 into PPU address w$12"
CertainlyCode $1C140 NMI_Function2_CopyByteRows
Comment       $1C140 "Copy b$16 bytes from w$10 into PPU address w$12"
Comment       $1C140 "Then, add b$16 into w$10 and $2000 to w$12"
Comment       $1C140 "Loop b$17 times"
CertainlyCode $1C178 NMI_Function3_CopySingleByteNtimes
Comment       $1C178 "Copy b$14 copies of b$10 into PPU address w$12"
CertainlyCode $1C18F NMI_Function4_PermutePalette
Comment       $1C18F "Permute palette number $10 in PPU memory such that bytes 0,1,2,3 become bytes 0,3,1,2"
CertainlyCode $1C0E8 NMI_Continues

JumpTable $1C0FF $1C100 2  5 NMI_FunctionTable

CertainlyCode $1C200 NMI_UpdateTimer
Comment       $1C200 "If $62 > 0, decrement it by 1, 10 times in second ($63 runs from 0..6)"
Comment       $1C20E "if(++$1E < 60), return;" 
Comment       $1C21A "$1E = 0; ++$22; if(++$1F < 60), return;"
Comment       $1C224 "$1F = 0;        if(++$20 < 60), return;" 
Comment       $1C230 "$20 = 0;        if(++$21 < 24), return;" 
Comment       $1C23C "$21 = 0;"

CertainlyCode $1251C PasswordProcessor1_Encode_CharacterStatus
CertainlyCode $124EC PasswordProcessor1_Encode_CharacterStatus_
CertainlyCode $126B6 PasswordProcessor2_Encode_GameStatus
CertainlyCode $124EF PasswordProcessor2_Encode_GameStatus_
CertainlyCode $12B6C PasswordProcessor3_Decode_CharacterStatus
CertainlyCode $124F2 PasswordProcessor3_Decode_CharacterStatus_
CertainlyCode $128DB PasswordProcessor4_Decode_GameStatus
CertainlyCode $124F5 PasswordProcessor4_Decode_GameStatus_
CertainlyData $12695 PasswordAlphabet

Comment $12541 "Copy 6 bytes from pointer($EE) to $0402 for rendering"
Comment $1254E "Add nul terminator, set coordinates 12 & 13, and render"

Comment $12567 "Initialize password"
Comment $1256A "Calculate the sum of character name letters into $ED"
Comment $12579 "Add 2 bits: profession XOR $ED"
Comment $12584 "For each inventory item that is not $FF:"
Comment $12584 "  If the number is <$80, add (n        )XOR $ED as 7 bits"
Comment $12584 "  else                   add ((n&63)+64)XOR $ED as 7 bits"
Comment $125A9 "Count the number of inventory items that are not $FF"
Comment $125BD "Put that count, XOR $ED, as 3 bits."
Comment $125C6 "Put MaxHealth,    XOR $ED, as 5 bits."
Comment $125D1 "Put Agility,      XOR $ED, as 5 bits."
Comment $125DC "Put Intelligence, XOR $ED, as 5 bits."
Comment $125E7 "Put Strength,     XOR $ED, as 5 bits."
# Max strength: 20, Max int: 20, Max HP: 31, Max MP: 31
Comment $125F2 "Put the sum of all bytes, XOR $ED, as 3 bits"
Comment $12612 "Render the password that was produced."

Comment $126D0 "Initialize password"
Comment $126D3 "Calculate the sum of character name letters into $ED for all four characters."
Comment $126FC "Put Treasury_Low,  XOR $ED, as 8 bits."
Comment $12705 "Put Treasury_High, XOR $ED, as 6 bits."
Comment $1270E "Put V,     XOR $ED, as 2 bits where V depends on $35: 0-3 = 0, 4-8 = 1, >=9 = 2"
Comment $12705 "Put Level, XOR $ED, as 5 bits."
Comment $12734 "Pointer = $A870"
Comment $12734 "  Contains: $00,$EE,$01,$BD,$04,$18,$06,$5E,$06,$19,$08,$89,$0A,$4B,$0C,$60"
Comment $12734 "            $0C,$70,$0C,$80,$0C,$90,$0C,$61,$0C,$71,$0C,$81,$0C,$91,$0C,$6E"
Comment $12734 "            $0C,$7E,$0C,$8E,$0C,$9E,$0C,$6F,$0C,$7F,$0C,$8F,$0C,$9F,$0D,$F0
Comment $12734 "            $0D,$14,$0F,$88,$FF"
Comment $1273C "Backup $35, $2E and $2F into $E0-$E2"
Comment $12748 "$FF terminates. Load byte, store into $35."
Comment $12752 "  Load next byte. Store upper 4 bits in $2E and lower 4 bits in $2F."
Comment $12763 "  Call GameData_TestFlag. Returns carry flag."
Comment $12766 "  Push 1 bit: Carry flag XOR $35"
Comment $1276E "  Increment pointer by 2, and loop."
Comment $1277E "Restore $35, $2E, $2F from $E0-$E2"
Comment $1278A "Put $02A3, NOT XORRED, as 1 bit"
Comment $12792 "Put $02A4, NOT XORRED, as 1 bit"
Comment $127B8 "If there is a Magician in the party,"
Comment $127B8 "  Store their Unknown12, LSR 2, XOR $ED, as 6 bits"
Comment $127B8 "  Store their Unknown13,        XOR $ED, as 8 bits"
Comment $127CF "Put the sum of all bytes, XOR $ED, as 3 bits"
Comment $127EF "Render the password that was produced."
CertainlyData $12870 ""
CertainlyCode $12734 "" 0 $08_09_0E_0F

Comment $129EE "Push the password characters in reverse order, 5 at time."
Comment $126D3 "Calculate the sum of character name letters into $ED for all four characters."
Comment $12A2A "Extract 3 bits. If (the number XOR $ED)AND 7 doesn't match the sum of all password bytes, fail"
Comment $12A4A "If there is not a magician in the party, skip this step."
Comment $12A61 "  Get 8 bits, XOR $ED, into $E3."
Comment $12A61 "  Get 6 bits, XOR $ED, ASL 2, ORA 3, into $E2."
Comment $12A77 "  For each character:"
Comment $12A77 "    If they are magician, copy $E2 and $E3 into Unknown12 and Unknown13."
Comment $12A77 "    Else, put 0 in those attributes."
Comment $12AA9 "$2A4 = (Get 1 bit) ? 255 : 0"
Comment $12ABF "$2A3 = (Get 1 bit) ? 255 : 0"
Comment $12ACD "Initialize pointer with the END of the list"
Comment $12AD5 "$FF terminates. Load byte, store into $35."
Comment $12ADF "  Load next byte. Store upper 4 bits in $2E and lower 4 bits in $2F."
Comment $12AF0 "  Pop 1 bit, XOR $35. If bit 0 is clear, skip the call."
Comment $12AFB "  Call GameData_SetFlag."
Comment $12AFE "  Decrement pointer by 2, and loop."
Comment $12B0E "Get 5 bits, XOR $ED, AND 31, store to Level"
# Maximum level is 16
Comment $12B22 "Get 2 bits, XOR $ED, AND  3."
Comment $12B22 "  If V=0, $35= 0, $2E= 9, $2F= 9."
Comment $12B22 "  If V=1, $35= 4, $2E=14, $2F=14."
Comment $12B22 "  If V=2, $35= 9, $2E= 5, $2F=10."
Comment $12B22 "  If V=3, $35=20, $2E= 2, $2F= 7."
Comment $12B39 "Get 6 bits, XOR $ED, AND 63, store to Treasury_High"
Comment $12B44 "Get 8 bits, XOR $ED,         store to Treasury_Low"
Comment $12B4D "Clear $9E and $9F (possibly EXP)"

Comment $12CA6 "Push the password characters in reverse order, 5 at time."
Comment $12CB9 "Calculate the sum of character name letters into $ED"
Comment $12CC8 "Extract 3 bits. If (the number XOR $ED)AND 7 doesn't match the sum of all password bytes, fail"
Comment $12CE8 "Extract 5 bits, XOR $ED AND 31. Fail if >= 21. Store as strength otherwise."
Comment $12CFC "Extract 5 bits, XOR $ED AND 31. Fail if >= 21. Store as intelligence otherwise."
Comment $12D10 "Extract 5 bits, XOR $ED AND 31. Fail if >= 21. Store as agility otherwise."
Comment $12D24 "Extract 5 bits, XOR $ED AND 31. Store as MaxHealth and CurrentHealth."
Comment $12D35 "Extract 3 bits, XOR $ED AND 7. Save as $EC."
Comment $12D40 "Clear the inventory (6 bytes) with 255."
Comment $12D4C "  Starting at Inventory0, if $EC>0,"
Comment $12D54 "  Extract 7 bits, XOR $ED AND 127. Convert bit 6 into bit 7. Save in inventory."
Comment $12D6B "  Fail if the item is one of: $26,$2E-$30, $34-$39, $3D-$3F."
Comment $12D7B "  Next inventory byte ($EC--)."
Comment $12D82 "Extract 2 bits, XOR $ED AND 3. Save as Profession."
Comment $12D93 "If the profession is magician:"
Comment $12D93 "  Store min(31, MaxHealth-10 + Intelligence) in MaxSpellpoints and CurrentSpellpoints."
Comment $12DB0 "Else, store 0 in MaxSpellpoints and CurrentSpellpoints."



CertainlyData $FA7E Data_FA7E

Comment $1FDE0 "$FE = Pointer = Data_FA7E; $FD = BitCounter = 0"
Comment $1FDEC "Load byte. If $FF, exit"
Comment $1FDF7 "If byte0 equals $35, and (byte1 >> 4) equals $2E, and (byte1 & 15) equals $2F,"
Comment $1FE10 "  found what we want."
Comment $1FE13 "Else increment pointer by 2, increment $FD by 1, and continue loop."
Comment $1FE25 "Set that bit in table of bits at $02A9."
CertainlyData $1CCD0 BitmaskTable_01_02_04_08_10_20_40_80
CertainlyData $FC85 ""



# Note: Passwords are maximally 4*5 = 20 characters long (100 bits).
#       Example: QJALS???4UNMR?
# Password alphabet: ?234679ABCEFGHIJKLMNOPQRSTUVWXYZ
CertainlyCode $12F40 Password_Clear
Comment       $12F40 "Clears the 16 bytes at $0300 and $B8"
CertainlyCode $12F87 Password_Pop_Low_X_Bits
Comment       $12F87 "Extracts the low X bits from the 16-byte sequence at $0300, rotating the entire sequence right."
Comment       $12F87 "The bits are stored in A, but in reverse."
Comment       $12F87 "Subtracts X from $B8, too."
CertainlyCode $12F50 Password_Push_Low_X_Bits
Comment       $12F50 "Inserts the low X bits from A in the 16-byte sequence at $0300, rotating the entire sequence left."
Comment       $12F50 "Adds X to $B8, too."
Comment       $12F50 "The bits are reversed in the process."
RAM $B8 Password_LengthInBits
RAM $87 Password_WhichCharacter

CertainlyCode $1C012 Return_0600_plus_Atimes32_
CertainlyCode $1E144 Return_0600_plus_Atimes32
Comment $1E144 "Loads X-Y with 0x0600 + A*0x20"

CertainlyCode $1C018 Math_Multiply_A_by_X_Return_XA_
CertainlyCode $1E20B Math_Multiply_A_by_X_Return_XA
Comment $1E20B "Uses temps: $AB-$B2"

CertainlyData $1266D Text_THIS_IS_THE_CODE_FOR
CertainlyData $12684 Text_WRITE_IT_DOWN1
CertainlyData $1284A Text_THE_GAME_CODE_IS
CertainlyData $1285D Text_WRITE_IT_DOWN2
CertainlyData $12B5F Text_YOUR_GAME
CertainlyData $12DCB Text_ENTER_CODE_FOR
CertainlyData $12DDC Text_q_2_3_4_6_7_9_A
CertainlyData $12DEE Text_B_C_E_F_G_H_I_J
CertainlyData $12E00 Text_K_L_M_N_O_P_Q_R
CertainlyData $12E12 Text_S_T_U_V_W_X_Y_Z
CertainlyData $12E24 Text_DONE

RAM $0600 Character1Name
RAM $0606 Character1_Strength
RAM $0607 Character1_Intelligence
RAM $0608 Character1_Agility
RAM $0609 Character1_CurrentHealthm
RAM $060A Character1_CurrentSpellpoints
RAM $060B Character1_Profession
# 0=Magician, 1=Warrior, 2=Thief
RAM $060C Character1_InventoryItem0
# $80 =  equipped
#    0=jewel, 1=sword, 2=dagger, 5=staff, 6=leather, etc.
#    List of items is at $18000, each is 20 ($16) bytes
RAM $060D Character1_InventoryItem1
RAM $060E Character1_InventoryItem2
RAM $060F Character1_InventoryItem3
RAM $0610 Character1_InventoryItem4
RAM $0611 Character1_InventoryItem5
RAM $0612 Character1_Unknown12
RAM $0613 Character1_Unknown13
RAM $0614 Character1_AC
RAM $0615 Character1_MaxHealth
RAM $0616 Character1_MaxSpellpoints
RAM $0620 Character2Name
RAM $0640 Character3Name
RAM $0660 Character4Name

RAM $9C Treasury_Low
RAM $9D Treasury_High
RAM $A0 Level
